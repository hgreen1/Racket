;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname bounce1) (read-case-sensitive #t) (teachpacks ((lib "image.ss" "teachpack" "2htdp") (lib "universe.ss" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.ss" "teachpack" "2htdp") (lib "universe.ss" "teachpack" "2htdp")))))

;; WorldState is a Ball, consisting of Location and Velocity
(define-struct ball (loc vel))

;; Location is a (make-posn x y)

;; Velocity is a (make-posn hori vert)
;; where hori is the horizontal velocity, and vert is the vertical velocity

(define *init* (make-ball (make-posn 100 100) 
                          (make-posn 2 7)))

(define *width*  500)
(define *height* 500)
(define *bg* (empty-scene *width* *height*))

(define *ball-radius* 10)
(define *ball* (circle *ball-radius* 'solid 'red))

;; move-ball :: Ball -> Ball
;; compute the next state of the ball, based on its current location and velocity
(check-expect (move-ball *init*)
              (make-ball (make-posn 102 107) 
                         (make-posn 2 7)))
(check-expect (move-ball (move-ball *init*))
              (make-ball (make-posn 104 114)
                         (make-posn 2 7)))
(check-expect (move-ball (make-ball (make-posn 200 200)
                                    (make-posn -5 -10)))
              (make-ball (make-posn 195 190)
                         (make-posn -5 -10)))
(check-expect (move-ball (make-ball (make-posn 100 490)
                                    (make-posn 5 10)))
              (make-ball (make-posn 105 490)
                         (make-posn 5 -10)))

(check-expect (move-ball (make-ball (make-posn 100 490)
                                    (make-posn 5 -10)))
              (make-ball (make-posn 105 480)
                         (make-posn 5 -10)))
                         
(define (move-ball ball)
  (make-ball (make-posn (+ (posn-x (ball-loc ball))
                           (posn-x (ball-vel ball)))
                        (cond ((and (>= (posn-y (ball-loc ball)) (- *height* 10))
                                   (> (posn-y (ball-vel ball)) 0))
                               (posn-y (ball-loc ball)))
                              ((and (<= (posn-y (ball-loc ball)) 10)
                                    (< (posn-y (ball-vel ball)) 0))
                                (posn-y (ball-loc ball)))
                              (else
                               (+ (posn-y (ball-loc ball))
                                  (posn-y (ball-vel ball))))))
             (make-posn (posn-x (ball-vel ball)) 
                        (cond  ((and (>= (posn-y (ball-loc ball)) (- *height* 10))
                                     (> (posn-y (ball-vel ball)) 0))
                                (- (posn-y (ball-vel ball))))
                               ((and (< (posn-y (ball-loc ball)) 10)
                                     (< (posn-y (ball-vel ball)) 0))
                                (- (posn-y (ball-vel ball))))
                               (else 
                                (posn-y (ball-vel ball)))))))


;; render :: Ball -> Image
(check-expect (render *init*)
              (place-image *ball* 100 100 *bg*))
(define (render ball)
  (place-image *ball*
               (posn-x (ball-loc ball)) (posn-y (ball-loc ball))
               *bg*))

(define (start init)
  (big-bang init
            (on-tick move-ball)
            (to-draw render)))
  
(start (make-ball (make-posn 100 100) (make-posn 0 5)))